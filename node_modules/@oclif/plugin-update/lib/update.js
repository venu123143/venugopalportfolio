"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Updater = void 0;
const tslib_1 = require("tslib");
/* eslint-disable unicorn/prefer-module */
const color_1 = (0, tslib_1.__importDefault)(require("@oclif/color"));
const core_1 = require("@oclif/core");
const fs = (0, tslib_1.__importStar)(require("fs-extra"));
const http_call_1 = (0, tslib_1.__importDefault)(require("http-call"));
const path = (0, tslib_1.__importStar)(require("path"));
const lodash_throttle_1 = (0, tslib_1.__importDefault)(require("lodash.throttle"));
const filesize_1 = (0, tslib_1.__importDefault)(require("filesize"));
const tar_1 = require("./tar");
const util_1 = require("./util");
const filesize = (n) => {
    const [num, suffix] = (0, filesize_1.default)(n, { output: 'array' });
    return Number.parseFloat(num).toFixed(1) + ` ${suffix}`;
};
class Updater {
    constructor(config) {
        this.config = config;
        this.clientRoot = config.scopedEnvVar('OCLIF_CLIENT_HOME') || path.join(config.dataDir, 'client');
        this.clientBin = path.join(this.clientRoot, 'bin', config.windows ? `${config.bin}.cmd` : config.bin);
    }
    async runUpdate(options) {
        const { autoUpdate, version, force = false } = options;
        if (autoUpdate)
            await this.debounce();
        core_1.ux.action.start(`${this.config.name}: Updating CLI`);
        if (this.notUpdatable()) {
            core_1.ux.action.stop('not updatable');
            return;
        }
        const channel = options.channel || await this.determineChannel();
        const current = await this.determineCurrentVersion();
        if (version) {
            const localVersion = force ? null : await this.findLocalVersion(version);
            if (this.alreadyOnVersion(current, localVersion || null)) {
                core_1.ux.action.stop(this.config.scopedEnvVar('HIDE_UPDATED_MESSAGE') ? 'done' : `already on version ${current}`);
                return;
            }
            await this.config.runHook('preupdate', { channel, version });
            if (localVersion) {
                await this.updateToExistingVersion(current, localVersion);
            }
            else {
                const index = await this.fetchVersionIndex();
                const url = index[version];
                if (!url) {
                    throw new Error(`${version} not found in index:\n${Object.keys(index).join(', ')}`);
                }
                const manifest = await this.fetchVersionManifest(version, url);
                const updated = manifest.sha ? `${manifest.version}-${manifest.sha}` : manifest.version;
                await this.update(manifest, current, updated, force, channel);
            }
            await this.config.runHook('update', { channel, version });
            core_1.ux.action.stop();
            core_1.ux.log();
            core_1.ux.log(`Updating to a specific version will not update the channel. If autoupdate is enabled, the CLI will eventually be updated back to ${channel}.`);
        }
        else {
            const manifest = await this.fetchChannelManifest(channel);
            const updated = manifest.sha ? `${manifest.version}-${manifest.sha}` : manifest.version;
            if (!force && this.alreadyOnVersion(current, updated)) {
                core_1.ux.action.stop(this.config.scopedEnvVar('HIDE_UPDATED_MESSAGE') ? 'done' : `already on version ${current}`);
            }
            else {
                await this.config.runHook('preupdate', { channel, version: updated });
                await this.update(manifest, current, updated, force, channel);
            }
            await this.config.runHook('update', { channel, version: updated });
            core_1.ux.action.stop();
        }
        await this.touch();
        await this.tidy();
        core_1.ux.debug('done');
    }
    async findLocalVersions() {
        await this.ensureClientDir();
        return fs
            .readdirSync(this.clientRoot)
            .filter(dirOrFile => dirOrFile !== 'bin' && dirOrFile !== 'current')
            .map(f => path.join(this.clientRoot, f));
    }
    async fetchVersionIndex() {
        core_1.ux.action.status = 'fetching version index';
        const newIndexUrl = this.config.s3Url(this.s3VersionIndexKey());
        try {
            const { body } = await http_call_1.default.get(newIndexUrl);
            if (typeof body === 'string') {
                return JSON.parse(body);
            }
            return body;
        }
        catch (_a) {
            throw new Error(`No version indices exist for ${this.config.name}.`);
        }
    }
    async ensureClientDir() {
        try {
            await fs.mkdirp(this.clientRoot);
        }
        catch (error) {
            if (error.code === 'EEXIST') {
                // for some reason the client directory is sometimes a file
                // if so, this happens. Delete it and recreate
                await fs.remove(this.clientRoot);
                await fs.mkdirp(this.clientRoot);
            }
            else {
                throw error;
            }
        }
    }
    composeS3SubDir() {
        let s3SubDir = this.config.pjson.oclif.update.s3.folder || '';
        if (s3SubDir !== '' && s3SubDir.slice(-1) !== '/')
            s3SubDir = `${s3SubDir}/`;
        return s3SubDir;
    }
    s3ChannelManifestKey(channel) {
        const { bin, arch } = this.config;
        const s3SubDir = this.composeS3SubDir();
        return path.join(s3SubDir, 'channels', channel, `${bin}-${this.determinePlatform()}-${arch}-buildmanifest`);
    }
    s3VersionManifestKey(version, hash) {
        const { bin, arch } = this.config;
        const s3SubDir = this.composeS3SubDir();
        return path.join(s3SubDir, 'versions', version, hash, `${bin}-v${version}-${hash}-${this.determinePlatform()}-${arch}-buildmanifest`);
    }
    s3VersionIndexKey() {
        const { bin, arch } = this.config;
        const s3SubDir = this.composeS3SubDir();
        return path.join(s3SubDir, 'versions', `${bin}-${this.determinePlatform()}-${arch}-tar-gz.json`);
    }
    async fetchChannelManifest(channel) {
        const s3Key = this.s3ChannelManifestKey(channel);
        try {
            return await this.fetchManifest(s3Key);
        }
        catch (error) {
            if (error.statusCode === 403)
                throw new Error(`HTTP 403: Invalid channel ${channel}`);
            throw error;
        }
    }
    async fetchVersionManifest(version, url) {
        const parts = url.split('/');
        const hashIndex = parts.indexOf(version) + 1;
        const hash = parts[hashIndex];
        const s3Key = this.s3VersionManifestKey(version, hash);
        return this.fetchManifest(s3Key);
    }
    async fetchManifest(s3Key) {
        core_1.ux.action.status = 'fetching manifest';
        const url = this.config.s3Url(s3Key);
        const { body } = await http_call_1.default.get(url);
        if (typeof body === 'string') {
            return JSON.parse(body);
        }
        return body;
    }
    async downloadAndExtract(output, manifest, channel) {
        const { version, gz, sha256gz } = manifest;
        const gzUrl = gz || this.config.s3Url(this.config.s3Key('versioned', {
            version,
            channel,
            bin: this.config.bin,
            platform: this.determinePlatform(),
            arch: this.config.arch,
            ext: 'gz',
        }));
        const { response: stream } = await http_call_1.default.stream(gzUrl);
        stream.pause();
        const baseDir = manifest.baseDir || this.config.s3Key('baseDir', {
            version,
            channel,
            bin: this.config.bin,
            platform: this.determinePlatform(),
            arch: this.config.arch,
        });
        const extraction = (0, tar_1.extract)(stream, baseDir, output, sha256gz);
        if (core_1.ux.action.type === 'spinner') {
            const total = Number.parseInt(stream.headers['content-length'], 10);
            let current = 0;
            const updateStatus = (0, lodash_throttle_1.default)((newStatus) => {
                core_1.ux.action.status = newStatus;
            }, 250, { leading: true, trailing: false });
            stream.on('data', data => {
                current += data.length;
                updateStatus(`${filesize(current)}/${filesize(total)}`);
            });
        }
        stream.resume();
        await extraction;
    }
    // eslint-disable-next-line max-params
    async update(manifest, current, updated, force, channel) {
        core_1.ux.action.start(`${this.config.name}: Updating CLI from ${color_1.default.green(current)} to ${color_1.default.green(updated)}${channel === 'stable' ? '' : ' (' + color_1.default.yellow(channel) + ')'}`);
        await this.ensureClientDir();
        const output = path.join(this.clientRoot, updated);
        if (force || !await fs.pathExists(output))
            await this.downloadAndExtract(output, manifest, channel);
        await this.refreshConfig(updated);
        await this.setChannel(channel);
        await this.createBin(updated);
    }
    async updateToExistingVersion(current, updated) {
        core_1.ux.action.start(`${this.config.name}: Updating CLI from ${color_1.default.green(current)} to ${color_1.default.green(updated)}`);
        await this.ensureClientDir();
        await this.refreshConfig(updated);
        await this.createBin(updated);
    }
    notUpdatable() {
        if (!this.config.binPath) {
            const instructions = this.config.scopedEnvVar('UPDATE_INSTRUCTIONS');
            if (instructions)
                core_1.ux.warn(instructions);
            return true;
        }
        return false;
    }
    alreadyOnVersion(current, updated) {
        return current === updated;
    }
    async determineChannel() {
        const channelPath = path.join(this.config.dataDir, 'channel');
        if (fs.existsSync(channelPath)) {
            const channel = await fs.readFile(channelPath, 'utf8');
            return String(channel).trim();
        }
        return this.config.channel || 'stable';
    }
    determinePlatform() {
        return this.config.platform === 'wsl' ? 'linux' : this.config.platform;
    }
    async determineCurrentVersion() {
        try {
            const currentVersion = await fs.readFile(this.clientBin, 'utf8');
            const matches = currentVersion.match(/\.\.[/\\|](.+)[/\\|]bin/);
            return matches ? matches[1] : this.config.version;
        }
        catch (error) {
            core_1.ux.debug(error);
        }
        return this.config.version;
    }
    async findLocalVersion(version) {
        const versions = await this.findLocalVersions();
        return versions
            .map(file => path.basename(file))
            .find(file => file.startsWith(version));
    }
    async setChannel(channel) {
        const channelPath = path.join(this.config.dataDir, 'channel');
        fs.writeFile(channelPath, channel, 'utf8');
    }
    async logChop() {
        try {
            core_1.ux.debug('log chop');
            const logChopper = require('log-chopper').default;
            await logChopper.chop(this.config.errlog);
        }
        catch (error) {
            core_1.ux.debug(error.message);
        }
    }
    async mtime(f) {
        const { mtime } = await fs.stat(f);
        return mtime;
    }
    // when autoupdating, wait until the CLI isn't active
    async debounce() {
        let output = false;
        const lastrunfile = path.join(this.config.cacheDir, 'lastrun');
        const m = await this.mtime(lastrunfile);
        m.setHours(m.getHours() + 1);
        if (m > new Date()) {
            const msg = `waiting until ${m.toISOString()} to update`;
            if (output) {
                core_1.ux.debug(msg);
            }
            else {
                core_1.ux.log(msg);
                output = true;
            }
            await (0, util_1.wait)(60 * 1000); // wait 1 minute
            return this.debounce();
        }
        core_1.ux.log('time to update');
    }
    // removes any unused CLIs
    async tidy() {
        core_1.ux.debug('tidy');
        try {
            const root = this.clientRoot;
            if (!await fs.pathExists(root))
                return;
            const files = await (0, util_1.ls)(root);
            const promises = files.map(async (f) => {
                if (['bin', 'current', this.config.version].includes(path.basename(f.path)))
                    return;
                const mtime = f.stat.mtime;
                mtime.setHours(mtime.getHours() + (42 * 24));
                if (mtime < new Date()) {
                    await fs.remove(f.path);
                }
            });
            for (const p of promises)
                await p; // eslint-disable-line no-await-in-loop
            await this.logChop();
        }
        catch (error) {
            core_1.ux.warn(error);
        }
    }
    async touch() {
        // touch the client so it won't be tidied up right away
        try {
            const p = path.join(this.clientRoot, this.config.version);
            core_1.ux.debug('touching client at', p);
            if (!await fs.pathExists(p))
                return;
            await fs.utimes(p, new Date(), new Date());
        }
        catch (error) {
            core_1.ux.warn(error);
        }
    }
    async refreshConfig(version) {
        this.config = await core_1.Config.load({ root: path.join(this.clientRoot, version) });
    }
    async createBin(version) {
        const dst = this.clientBin;
        const { bin, windows } = this.config;
        const binPathEnvVar = this.config.scopedEnvVarKey('BINPATH');
        const redirectedEnvVar = this.config.scopedEnvVarKey('REDIRECTED');
        if (windows) {
            const body = `@echo off
setlocal enableextensions
set ${redirectedEnvVar}=1
set ${binPathEnvVar}=%~dp0${bin}
"%~dp0..\\${version}\\bin\\${bin}.cmd" %*
`;
            await fs.outputFile(dst, body);
        }
        else {
            /* eslint-disable no-useless-escape */
            const body = `#!/usr/bin/env bash
set -e
get_script_dir () {
  SOURCE="\${BASH_SOURCE[0]}"
  # While $SOURCE is a symlink, resolve it
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$( readlink "$SOURCE" )"
    # If $SOURCE was a relative symlink (so no "/" as prefix, need to resolve it relative to the symlink base directory
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  echo "$DIR"
}
DIR=$(get_script_dir)
${binPathEnvVar}="\$DIR/${bin}" ${redirectedEnvVar}=1 "$DIR/../${version}/bin/${bin}" "$@"
`;
            /* eslint-enable no-useless-escape */
            await fs.remove(dst);
            await fs.outputFile(dst, body);
            await fs.chmod(dst, 0o755);
            await fs.remove(path.join(this.clientRoot, 'current'));
            await fs.symlink(`./${version}`, path.join(this.clientRoot, 'current'));
        }
    }
}
exports.Updater = Updater;
